<?php
	
	/**
	 * Gluu-oxd-library
	 *
	 * An open source application library for PHP
	 *
	 *
	 * @copyright Copyright (c) 2017, Gluu Inc. (https://gluu.org/)
	 * @license	  MIT   License            : <http://opensource.org/licenses/MIT>
	 *
	 * @package	  Oxd Library by Gluu
	 * @category  Library, Api
	 * @version   3.1.2
	 *
	 * @author    Gluu Inc.          : <https://gluu.org>
	 * @link      Oxd site           : <https://oxd.gluu.org>
	 * @link      Documentation      : <https://gluu.org/docs/oxd/3.1.2/libraries/php/ >
	 * @director  Mike Schwartz      : <mike@gluu.org>
	 * @support   Support email      : <support@gluu.org>
	 * @developer Volodya Karapetyan : <https://github.com/karapetyan88> <mr.karapetyan88@gmail.com>
	 *
	 
	 *
	 * This content is released under the MIT License (MIT)
	 *
	 * Copyright (c) 2017, Gluu inc, USA, Austin
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 *
	 */

	/**
	 * UMA Requesting Party
	 * UMA RP - Get RPT class
	 *
	 * Class is connecting to oxd-server via socket, and getting RPT from gluu-server.
	 *
	 * @package		  Gluu-oxd-library
	 * @subpackage	Libraries
	 * @category	  Relying Party (RP) and User Managed Access (UMA)
	 * @see	        Client_Socket_OXD_RP
	 * @see	        Client_OXD_RP
	 * @see	        Oxd_RP_config
	 */
	
	namespace oxdrp;
	use oxdrp\Client_OXD_RP;
	
	class Uma_rp_get_rpt extends Client_OXD_RP{
	
	    /**
	     * @var string $request_oxd_id                            This parameter you must get after registration site in gluu-server
	     */
	    private $request_oxd_id = null;
            
            /**
             * var string $request_ticket
             */
            private $request_ticket;
            
            /**
             * var string $request_claim_token
             */
            private $request_claim_token;
            
            /**
             * var string $request_claim_token_format
             */
            private $request_claim_token_format;
            
            /**
             * var string $request_pct
             */
            private $request_pct;
            
            /**
             * var string $request_rpt
             */
            private $request_rpt;
            
            /**
             * var string $request_scope
             */
            private $request_scope;
            
            /**
             * var string $request_state
             */
            private $request_state;
            
            /**
             * var string $request_protection_access_token
             */
            private $request_protection_access_token;
            
            /**
             * var string $response_access_token
             */
            private $response_access_token;
            
            /**
             * var string $response_token_type
             */
            private $response_token_type;
            
            /**
             * var string $response_pct
             */
            private $response_pct;
            
            /**
             * var string $response_upgraded
             */
            private $response_upgraded;
	
	    /**
	     * Constructor
	     *
	     * @return	void
	     */
	    public function __construct($https_extension_config = null)
	    {
                if(is_array($https_extension_config)){
                    Client_Socket_OXD_RP::setUrl(substr($https_extension_config["host"], -1) !== '/'?$https_extension_config["host"]."/".$https_extension_config["uma_rp_get_rpt"]:$https_extension_config["host"].$https_extension_config["uma_rp_get_rpt"]);
                }
	        parent::__construct(); // TODO: Change the autogenerated stub
	    }
            
            /**
	     * @return string
	     */
            function getRequest_oxd_id() {
                return $this->request_oxd_id;
            }
            
            /**
	     * @return string
	     */
            function getRequest_ticket() {
                return $this->request_ticket;
            }
            
            /**
	     * @return string
	     */
            function getRequest_claim_token() {
                return $this->request_claim_token;
            }
            
            /**
	     * @return string
	     */
            function getRequest_claim_token_format() {
//                if(!is_null(getRequest_claim_token()) && is_null($this->request_claim_token_format)){
//                    $this->setRequest_claim_token_format("http://openid.net/specs/openid-connect-core-1_0.html#IDToken");
//                }
                return $this->request_claim_token_format;
            }
            
            /**
	     * @return string
	     */
            function getRequest_pct() {
                return $this->request_pct;
            }
            
            /**
	     * @return string
	     */
            function getRequest_rpt() {
                return $this->request_rpt;
            }
            
            /**
	     * @return string
	     */
            function getRequest_scope() {
                return $this->request_scope;
            }
            
            /**
	     * @return string
	     */
            function getRequest_state() {
                return $this->request_state;
            }
            
            /**
	     * @return string
	     */
            function getRequest_protection_access_token() {
                return $this->request_protection_access_token;
            }
            
            /**
	     * @return void
	     */
            function setRequest_oxd_id($request_oxd_id) {
                $this->request_oxd_id = $request_oxd_id;
            }
            
            /**
	     * @return void
	     */
            function setRequest_ticket($request_ticket) {
                $this->request_ticket = $request_ticket;
            }
            
            /**
	     * @return void
	     */
            function setRequest_claim_token($request_claim_token) {
                $this->request_claim_token = $request_claim_token;
            }
            
            /**
	     * @return void
	     */
            function setRequest_claim_token_format($request_claim_token_format) {
                $this->request_claim_token_format = $request_claim_token_format;
            }
            
            /**
	     * @return void
	     */
            function setRequest_pct($request_pct) {
                $this->request_pct = $request_pct;
            }
            
            /**
	     * @return void
	     */
            function setRequest_rpt($request_rpt) {
                $this->request_rpt = $request_rpt;
            }
            
            /**
	     * @return void
	     */
            function setRequest_scope($request_scope) {
                $this->request_scope = $request_scope;
            }
            
            /**
	     * @return void
	     */
            function setRequest_state($request_state) {
                $this->request_state = $request_state;
            }
            
            /**
	     * @return void
	     */
            function setRequest_protection_access_token($request_protection_access_token) {
                $this->request_protection_access_token = $request_protection_access_token;
            }            
            
            /**
	     * @return string
	     */
            function getResponse_access_token() {
                $this->response_access_token = $this->getResponseData()->access_token;
                return $this->response_access_token;
            }
            
            /**
	     * @return string
	     */
            function getResponse_token_type() {
                $this->response_token_type = $this->getResponseData()->token_type;
                return $this->response_token_type;
            }
            
            /**
	     * @return string
	     */
            function getResponse_pct() {
                $this->response_pct = $this->getResponseData()->pct;
                return $this->response_pct;
            }
            
            /**
	     * @return string
	     */
            function getResponse_upgraded() {
                $this->response_upgraded = $this->getResponseData()->upgraded;
                return $this->response_upgraded;
            }
	
	    /**
	     * Protocol command to oxd server
	     * @return void
	     */
	    public function setCommand()
	    {
	        $this->command = 'uma_rp_get_rpt';
	    }
            /**
             * var bool $is_needinfo
             */
            private $is_needinfo;
            /**
             * var string $needinfo_ticket
             */
            private $needinfo_ticket;
            /**
             * var array $required_claims
             */
            private $required_claims;
            /**
             * var string $redirect_user
             */
            private $redirect_user;
            
            /**
	     * @return bool
	     */
            function getIs_needinfo() {
                return $this->is_needinfo;
            }
            
            /**
	     * @return string
	     */
            function getNeedinfo_ticket() {
                return $this->needinfo_ticket;
            }
            
            /**
	     * @return string
	     */
            function getRequired_claims() {
                return $this->required_claims;
            }
            
            /**
	     * @return string
	     */
            function getRedirect_user() {
                return $this->redirect_user;
            }
            
            /**
             * @param bool $is_needinfo
	     * @return void
	     */
            function setIs_needinfo($is_needinfo) {
                $this->is_needinfo = $is_needinfo;
            }
            
            /**
             * @param string $needinfo_ticket
	     * @return void
	     */
            function setNeedinfo_ticket($needinfo_ticket) {
                $this->needinfo_ticket = $needinfo_ticket;
            }
            
            /**
             * @param string $required_claims
	     * @return void
	     */
            function setRequired_claims($required_claims) {
                $this->required_claims = $required_claims;
            }
            
            /**
             * @param string $redirect_user
	     * @return void
	     */
            function setRedirect_user($redirect_user) {
                $this->redirect_user = $redirect_user;
            }

                        
	    /**
	     * Protocol parameter to oxd server
	     * @return void
	     */
	    public function setParams()
	    {
	        $this->params = array(
	            "oxd_id" => $this->getRequest_oxd_id(),
	            "ticket" => $this->getRequest_ticket(),
	            "claim_token" => $this->getRequest_claim_token(),
	            "claim_token_format" => $this->getRequest_claim_token_format(),
	            "pct" => $this->getRequest_pct(),
	            "rpt" => $this->getRequest_rpt(),
	            "scope" => $this->getRequest_scope(),
	            "state" => $this->getRequest_state(),
	            "protection_access_token" => $this->getRequest_protection_access_token()
	        );
	    }
            
            /**
	     * send function sends the command to the oxd server.
	     *
	     * Args:
	     * command (dict) - Dict representation of the JSON command string
	     * @return	void
	     **/
	    public function request($url="")
	    {
	        $this->setParams();
	
	        $jsondata = json_encode($this->getData(), JSON_UNESCAPED_SLASHES);
	
	        if(!$this->is_JSON($jsondata)){
	            $this->log("Sending parameters must be JSON.",'Exiting process.');
	            $this->error_message('Sending parameters must be JSON.');
	        }
	        $lenght = strlen($jsondata);
	        if($lenght<=0){
	            $this->log("Length must be more than zero.",'Exiting process.');
	            $this->error_message("Length must be more than zero.");
	        }else{
	            $lenght = $lenght <= 999 ? "0" . $lenght : $lenght;
	        }
                if(Client_Socket_OXD_RP::getUrl() != null || $url != ""){
                    $jsonHttpData = $this->getData()["params"];
                    $this->response_json = $this->oxd_http_request(Client_Socket_OXD_RP::getUrl()?Client_Socket_OXD_RP::getUrl():$url,$jsonHttpData);
                }
                else{
                    $this->response_json = $this->oxd_socket_request(utf8_encode($lenght . $jsondata));
                    $this->response_json = str_replace(substr($this->response_json, 0, 4), "", $this->response_json);
                }
	        if ($this->response_json) {
	            $object = json_decode($this->response_json);
	            if ($object->status == 'error') {
                        if($object->data->error == "need_info"){
                            $this->response_object = json_decode($this->response_json);
                            $this->setIs_needinfo(true);
                            $this->setNeedinfo_ticket($object->data->details->ticket);
                            $this->setRequired_claims($object->data->details->required_claims);
                            $this->setRequired_claims($object->data->details->redirect_user);
                        } else {
                            $this->error_message($object->data->error . ' : ' . $object->data->error_description);
                        }
	            } else if ($object->status == 'ok') {
	                $this->response_object = json_decode($this->response_json);
	            }
	        } else {
	            $this->log("Response is empty...",'Exiting process.');
	            $this->error_message('Response is empty...');
	        }
	    }
	
	}
